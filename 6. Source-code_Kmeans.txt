################################################################################################################################
#	FUNCTION DEF
################################################################################################################################

def K_m_cluster (num_clusters, df, text_col_name, top_n_terms ):
    import numpy as np
    import pandas as pd
    import bokeh.plotting as bp
    from bokeh.models import HoverTool, BoxSelectTool
    from bokeh.plotting import figure, show, output_notebook

    from sklearn.feature_extraction.text import TfidfVectorizer
    import warnings
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    from sklearn.cluster import MiniBatchKMeans
    vectorizer = TfidfVectorizer(min_df=30, max_features=10000, tokenizer=tokenizer_tf_idf,stop_words =  stopwords(), ngram_range = (1,1))
    
    vz = vectorizer.fit_transform(list(df[text_col_name]))
    kmeans_model = MiniBatchKMeans(n_clusters=num_clusters, init='k-means++', n_init=1, init_size=1000, batch_size=1000, verbose=False, max_iter=1000)
    kmeans = kmeans_model.fit(vz)
    kmeans_clusters = kmeans.predict(vz)
    kmeans_distances = kmeans.transform(vz)

    high_impact_cluster_terms = kmeans.cluster_centers_.argsort()[:, ::-1]
    terms = vectorizer.get_feature_names()
    for i in range(num_clusters):
        print("Cluster %d:" % i)
        hot_terms = ''
        for j in high_impact_cluster_terms[i, :top_n_terms]:
            hot_terms += terms[j] + ' | '
        print(hot_terms)
        print() 
    
    colormap = np.array(["#6d8dca", "#69de53", "#723bca", "#c3e14c", "#c84dc9", "#68af4e", "#6e6cd5",
    "#e3be38", "#4e2d7c", "#5fdfa8", "#d34690", "#3f6d31", "#d44427", "#7fcdd8", "#cb4053", "#5e9981",
    "#803a62", "#9b9e39", "#c88cca", "#e1c37b", "#34223b", "#bdd8a3", "#6e3326", "#cfbdce", "#d07d3c",
    "#52697d", "#7d6d33", "#d27c88", "#36422b", "#b68f79"])

    plot_kmeans = bp.figure(plot_width=700, plot_height=600, title="KMeans clustering of the news",
    tools="pan,wheel_zoom,box_zoom,reset,hover,previewsave",
    x_axis_type=None, y_axis_type=None, min_border=1)
    
    from sklearn.manifold import TSNE
    tsne_model = TSNE(n_components=2, verbose=1, random_state=0)
    tsne_kmeans = tsne_model.fit_transform(kmeans_distances)

    kmeans_df = pd.DataFrame(tsne_kmeans, columns=['x', 'y'])
    kmeans_df['cluster'] = kmeans_clusters
    kmeans_df['text'] = df[text_col_name]
    kmeans_df['colors'] = colormap[kmeans_clusters]
    plot_kmeans.scatter(x='x', y='y', color='colors', source=kmeans_df)
    
    hover = plot_kmeans.select(dict(type=HoverTool))
    hover.tooltips={"text": "@text", "cluster":"@cluster"}
    show(plot_kmeans)

    
    return  kmeans_df


###############################################################################################################################
#	RUNNING CMDS
###############################################################################################################################

news_df = pd.read_pickle('final_clean_hindu_corpus.pkl')

news_df = clear_more_duplicates(news_df, 'text')


kmeans_df = K_m_cluster (25, news_df,'text', 20 )

kmeans_df['cluster'].hist(bins =25)

file = list(kmeans_df[kmeans_df['cluster']==15]['text'])
with open ("cluster_15.txt","w")as fp:
    for line in file:
        fp.write(line+"\n")

kmeans_df = K_m_cluster (30, news_df,'text', 20 )

kmeans_df['cluster'].hist(bins =30)